#!/usr/bin/env python3
"""
@package eurobench_tooling
@file content_checker.py
@author Anthony Remazeilles
@brief Tool parsing the yaml descrption of a protocol content, and make some sanity check on it

Copyright (C) 2020 Tecnalia Research and Innovation
Distributed under the Apache 2.0 license.
"""

import sys
from termcolor import colored
import os
import yaml
from eurobench_tooling import config


def get_pi_name(spec, verbose=True):
  if 'pi' not in spec:
    print(colored('no pi defined', 'yellow'))
    return set()
  if spec['pi'] == 'undef':
    print(colored('no pi defined', 'yellow'))
    return set()
  lname = set()

  for item in spec['pi']:
    lname.add(item['name'])
  return lname

def check_algo_pi_connection(spec):
  if 'pi_algo' not in spec:
    print(colored('no algo defined', 'yellow'))
    return False

  lpis_n = get_pi_name(spec)
  print ('PIS in file: {}'.format(lpis_n))

  lpi_in_algo = set()

  all_ok = True
  for item in spec['pi_algo']:
    if 'pi' not in item or item['pi'] == 'undef':
      print(colored('No pi associated to the algo', 'yellow'))
      all_ok = False
      continue

    for item_pi in item['pi']:
      lpi_in_algo.add(item_pi)
      if item_pi not in lpis_n:
        print(colored('Unknown pi {} in algo: {}'.format(item_pi, item['name']), 'red'))
        all_ok = False
  print ('PIS in algo: {}'.format(lpi_in_algo))

  for item in lpis_n:
    if item not in lpi_in_algo:
      print(colored('Defined pi {} not generated by algos'.format(item), 'red'))
      all_ok = False
  return all_ok

def get_pi_output(spec, verbose=True):
  if 'pi' not in spec:
    print(colored('no pi defined', 'yellow'))
    return set()
  loutput = list()
  for item in spec['pi']:
    if verbose:
      print("PI: {} output: {}".format(item['name'], item['output']))
    loutput.append(item['output'])
  # remove duplicates
  loutput = set(loutput)
  if verbose:
    print ("All together: {}".format(loutput))
  return loutput

def check_pi_output(spec):
  loutput = get_pi_output(spec)

  all_ok = True
  for item in loutput:
    if item not in config.EurobenchConfig.output_type:
      print(colored('Unknown output format: {}'.format(item), 'red'))
      all_ok = False
  return all_ok

def get_algo_input(spec, verbose=True):
  if 'pi_algo' not in spec:
    print(colored('no algo defined', 'yellow'))
    return set()
  linput = list()
  for item in spec['pi_algo']:
    if verbose:
      print("Algo: {}".format(item['name']))
      print("  input: {}".format(item['input_files']))
    linput = linput + item['input_files']
  # remove duplicates
  linput = set(linput)
  if verbose:
    print ("All together: {}".format(linput))
  return linput

def check_algo_input(spec):
  linput = get_algo_input(spec)

  all_ok = True
  for item in linput:
    if item not in config.EurobenchConfig.input_type:
      # print(colored("Issue with {}".format(item), 'yellow'))
      # check if this something like knownTag_additionalTerm
      item_name, item_extension = os.path.splitext(item)
      item_name = item_name.split('_')
      item_root = item_name[0] + item_extension
      # print("root_item: {}".format(item_root))
      if item_root in config.EurobenchConfig.input_type:
        print(colored('item {} considered as {}'.format(item, item_root), 'yellow'))
      else:
        print(colored('Unknown input file: {}'.format(item), 'red'))
        all_ok = False

  return all_ok

USAGE = """usage: check_template yaml_file
yaml_file: YAML file containing the protocol description
return 0 if all good, 1 elsewise
"""

def main():
  if len(sys.argv) != 2:
      print(colored("Wrong input parameters !", "red"))
      print(colored(USAGE, "yellow"))
      return -1
  yaml_file = sys.argv[1]

  print("Check config: {}".format(config.EurobenchConfig.input_type))

  try:
    with open(yaml_file, 'r') as open_file:
      spec = yaml.load(open_file, Loader=yaml.FullLoader)
  except IOError as err:
    print(colored("IO Error: {}".format(err), 'red'))
    return 1
  except yaml.parser.ParserError as err:
    print(colored("Parsing Error detected: {}".format(err), 'red'))
    return 1

  all_ok = True

  print(colored("check PI", 'blue'))
  if not check_pi_output(spec):
    all_ok = False

  print(colored("Checking Algo", 'blue'))
  print(colored("check input files"))
  if not check_algo_input(spec):
    all_ok = False
  print(colored('check algo_pi connection'))
  if not check_algo_pi_connection(spec):
    all_ok = False

  if all_ok:
    print(colored("Spec seems good", 'green'))
  else:
    print(colored("Component to be verified", 'red'))
  return all_ok
